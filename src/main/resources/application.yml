spring:
  application:
    name: portfolio-backend

  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: ${SPRING_JPA_HIBERNATE_DDL_AUTO:validate}
    show-sql:  ${SPRING_JPA_HIBERNATE_SHOW_SQL:false}
    properties:
      org.hibernate.envers.default_schema: portfolio_aud
      hibernate:
        format_sql: ${SPRING_JPA_PROPERTIES_HIBERNATE_FORMAT_SQL:false}
        jdbc.batch_size: 25                     # Melhora performance em inserts em lote
        order_inserts: true                     # Otimiza inserts
        order_updates: true                     # Otimiza updates
        batch_versioned_data: true              # Otimiza updates versionados
        query.in_clause_parameter_padding: true # Evita cache explosion em IN clauses
        default_schema: portfolio
        generate_statistics: true               # Para monitoramento
        connection.provider_disables_autocommit: true
        jdbc.lob.non_contextual_creation: true  # Evita problemas com LOBs

  liquibase:
    enabled: ${SPRING_LIQUIBASE_ENABLED:true}
    change-log: classpath:db/changelog/db.changelog-master.xml
    default-schema: portfolio
    liquibase-schema: public
    drop-first: false
    parameters:
      logLevel: INFO

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    hikari:
      maximum-pool-size: 20
      minimum-idle: 5
      connection-timeout: 30000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      auto-commit: false

  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
      group-id: portfolio-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json.trusted.packages: com.jonathanssm.portfoliobackend.model.*

logging:
  level:
    com.jonathanssm.portfoliobackend: ${LOGGING_LEVEL_COM_JONATHANSSM_PORTFOLIOBACKEND:INFO}
    org.springframework: ${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK:WARN}
    org.springframework.security: ${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY:DEBUG}
    org.hibernate: ${LOGGING_LEVEL_ORG_HIBERNATE:ERROR}
    org.hibernate.SQL: ${LOGGING_LEVEL_ORG_HIBERNATE_SQL:DEBUG}
    org.apache.kafka: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{username}] [%X{operation}] %logger{36} - %msg%n"
    file: "%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level [%X{username}] [%X{operation}] %logger{36} - %msg%n"
  file:
    name: logs/application.log

# Documentação da API
springdoc:
  api-docs:
    path: /api-docs
  swagger-ui:
    path: /swagger-ui.html
    operationsSorter: method
    tagsSorter: alpha
    tryItOutEnabled: true
  show-actuator: true

# Configurações JWT
jwt:
  secret: ${JWT_SECRET:Kj8mN2pQ9rS4tU7vW0xY3zA6bC1dE5fG8hI2jL4mN7oP0qR3sT6uV9wX2yZ5aB8D9eF2gH5iJ8kL1mNT6mN9oZ2aB9mN2oPu}
  expiration: ${JWT_EXPIRATION:3600000} # 1 hora em millisegundos (melhor segurança)
  refresh-expiration: ${JWT_REFRESH_EXPIRATION:604800000} # 7 dias em millisegundos

# Configurações CORS
cors:
  allowed-origins: ${CORS_ALLOWED_ORIGINS:http://localhost:3000,https://www.jonathanssm.com}

management:
  endpoints.web.exposure.include: health,info,metrics
  endpoint.health.show-details: ${MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS:when-authorized}
  endpoint.health.probes.enabled: true
