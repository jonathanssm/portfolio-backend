package com.jonathanssm.portfoliobackend.service;

import com.jonathanssm.portfoliobackend.dto.UserRegistrationRequest;
import com.jonathanssm.portfoliobackend.dto.UserResponse;
import com.jonathanssm.portfoliobackend.dto.mapper.UserMapper;
import com.jonathanssm.portfoliobackend.messaging.UserProducer;
import com.jonathanssm.portfoliobackend.model.User;
import com.jonathanssm.portfoliobackend.repository.UserRepository;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

/**
 * Service especializado em gerenciamento de usu√°rios (CRUD)
 * Responsabilidade √∫nica: Opera√ß√µes de cria√ß√£o, atualiza√ß√£o e exclus√£o de usu√°rios
 */
@Service
@RequiredArgsConstructor
@Slf4j
public class UserManagementService {

    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final UserProfileService userProfileService;
    private final UserProducer userProducer;
    private final UserMapper userMapper;

    /**
     * Cria um novo usu√°rio
     *
     * @param user Usu√°rio a ser criado
     * @return Usu√°rio criado
     * @throws IllegalArgumentException se username ou email j√° existirem
     */
    @Transactional
    public User createUser(User user) {
        log.info("üë§ Creating new user: {}", user.getUsername());

        validateUserCreation(user);

        // Codifica a senha
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        // Salva o usu√°rio
        User savedUser = userRepository.save(user);

        // Adiciona perfil b√°sico por padr√£o
        userProfileService.addDefaultProfileToUser(savedUser);

        // Publica evento de cria√ß√£o de usu√°rio
        userProducer.sendUserCreated(savedUser);

        log.info("‚úÖ User created successfully: {}", savedUser.getUsername());
        return savedUser;
    }


    /**
     * Registra um novo usu√°rio no sistema (endpoint p√∫blico)
     *
     * @param request Dados do usu√°rio para registro
     * @return UserResponse com dados do usu√°rio criado
     */
    @Transactional
    public UserResponse registerUser(UserRegistrationRequest request) {
        log.info("üìù Registering new user: {}", request.username());

        // Converte DTO para Entity usando mapper
        User user = userMapper.toEntity(request);

        // Valida dados de cria√ß√£o
        validateUserCreation(user);

        // Codifica a senha
        user.setPassword(passwordEncoder.encode(user.getPassword()));

        // Salva o usu√°rio
        User savedUser = userRepository.save(user);

        // Adiciona perfil b√°sico por padr√£o
        userProfileService.addDefaultProfileToUser(savedUser);

        // Publica evento de cria√ß√£o de usu√°rio
        userProducer.sendUserCreated(savedUser);

        // Publica evento de registro de usu√°rio (diferente de cria√ß√£o)
        userProducer.sendUserRegistered(savedUser);

        log.info("‚úÖ User registered successfully: {}", savedUser.getUsername());

        // Converte Entity para Response usando mapper
        return userMapper.toResponse(savedUser);
    }

    /**
     * Valida dados para cria√ß√£o de usu√°rio
     *
     * @param user Usu√°rio a ser validado
     * @throws IllegalArgumentException se valida√ß√£o falhar
     */
    private void validateUserCreation(User user) {
        if (userRepository.existsByUsername(user.getUsername())) {
            throw new IllegalArgumentException("Username already exists: " + user.getUsername());
        }

        if (userRepository.existsByEmail(user.getEmail())) {
            throw new IllegalArgumentException("Email already exists: " + user.getEmail());
        }
    }
}
