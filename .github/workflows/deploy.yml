name: Deploy to AWS ECS (prod)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      ECR_REPO: ${{ secrets.ECR_REPO }}
      ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}
      ECS_SERVICE: ${{ secrets.ECS_SERVICE }}
      SPRING_DATASOURCE_URL: ${{ secrets.SPRING_DATASOURCE_URL }}
      SPRING_DATASOURCE_USERNAME: ${{ secrets.SPRING_DATASOURCE_USERNAME }}
      SPRING_DATASOURCE_PASSWORD: ${{ secrets.SPRING_DATASOURCE_PASSWORD }}
      KAFKA_BOOTSTRAP_SERVERS: ${{ secrets.KAFKA_BOOTSTRAP_SERVERS }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push Docker image
        run: |
          IMAGE_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:latest
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

      - name: Ensure CloudWatch log groups exist
        run: |
          aws logs create-log-group --log-group-name /ecs/portfolio-backend-task || true

      - name: Render ECS task definition
        run: |
          IMAGE_URI=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}:latest
          EXEC_ROLE="arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole"
          TASK_ROLE="arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/ecsTaskRole" # ajuste se precisar

          jq --arg IMAGE "$IMAGE_URI" \
             --arg EXEC_ROLE "$EXEC_ROLE" \
             --arg TASK_ROLE "$TASK_ROLE" \
             --arg DB_URL "${{ env.SPRING_DATASOURCE_URL }}" \
             --arg DB_USER "${{ env.SPRING_DATASOURCE_USERNAME }}" \
             --arg DB_PASSWORD "${{ env.SPRING_DATASOURCE_PASSWORD }}" \
             --arg KAFKA_BROKER "${{ env.KAFKA_BOOTSTRAP_SERVERS }}" \
             '.executionRoleArn=$EXEC_ROLE |
              .taskRoleArn=$TASK_ROLE |
              .containerDefinitions[0].image=$IMAGE |
              .containerDefinitions[0].environment[] |=
                if .name=="SPRING_DATASOURCE_URL" then .value=$DB_URL
                elif .name=="SPRING_DATASOURCE_USERNAME" then .value=$DB_USER
                elif .name=="SPRING_DATASOURCE_PASSWORD" then .value=$DB_PASSWORD
                elif .name=="KAFKA_BOOTSTRAP_SERVERS" then .value=$KAFKA_BROKER
                else . end' ecs-task.json > ecs-task-updated.json

      - name: Register Task Definition
        run: |
          TASK_DEF_JSON=$(cat ecs-task-updated.json)
          AWS_OUTPUT=$(aws ecs register-task-definition --cli-input-json "$(cat ecs-task-updated.json)")
          echo "$AWS_OUTPUT" > register-output.json
          echo "Registered task definition."

      - name: Deploy to ECS (update service)
        run: |
          aws ecs update-service --cluster "${{ env.ECS_CLUSTER }}" --service "${{ env.ECS_SERVICE }}" --force-new-deployment
