name: Deploy Backend to VM

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop

concurrency:
  group: backend-deploy-${{ github.ref }} # n√£o cancela se for branch diferente
  #group: backend-deploy # cancela para qualquer branch
  cancel-in-progress: true

env:
  VM_HOST: ${{ secrets.BACKEND_VM_IP }}
  VM_USER: ${{ secrets.BACKEND_VM_USER }}
  VM_SSH_KEY: ${{ secrets.BACKEND_VM_SSH_KEY }}
  VM_PATH: /home/ubuntu/backend
  JAR_NAME: portfolio-backend-0.0.1-SNAPSHOT.jar

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java and Cache
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build JAR with verification
        run: |
          chmod +x ./mvnw
          ./mvnw -B clean package -DskipTests -T 1C
          
          # ‚úÖ Verifica√ß√£o robusta do JAR
          echo "Verifying JAR file..."
          if [ ! -f "target/$JAR_NAME" ]; then
            echo "‚ùå JAR file not found in target/"
            ls -la target/
            exit 1
          fi
          
          if [ ! -s "target/$JAR_NAME" ]; then
            echo "‚ùå JAR file is empty"
            ls -lh target/
            exit 1
          fi
          
          if file "target/$JAR_NAME" | grep -q "Java archive"; then
            echo "‚úÖ JAR file is valid"
          else
            echo "‚ùå JAR file is not a valid Java archive"
            file "target/$JAR_NAME"
            exit 1
          fi

      - name: Prepare artifacts
        run: |
          cp target/$JAR_NAME .
          ls -la $JAR_NAME Dockerfile

      - name: Setup VM directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            mkdir -p ${{ env.VM_PATH }}
            cd ${{ env.VM_PATH }}
            rm -rf *.jar Dockerfile 2>/dev/null || true
            echo "VM directory cleaned and ready"

      - name: Copy artifacts to VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          source: "${{ env.JAR_NAME }},Dockerfile"
          target: ${{ env.VM_PATH }}
          overwrite: true

      - name: Verify artifacts on VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "üì¶ Verifying artifacts on VM..."
            ls -la
            
            if [ ! -f "${{ env.JAR_NAME }}" ]; then
              echo "‚ùå JAR not found on VM"
              exit 1
            fi
            
            if [ ! -s "${{ env.JAR_NAME }}" ]; then
              echo "‚ùå JAR is empty on VM"
              exit 1
            fi
            
            echo "‚úÖ All artifacts verified successfully"

      - name: Deploy Docker container with memory limits
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          envs: GITHUB_EVENT_NAME,GITHUB_REF
          script: |
            set -e
            cd ${{ env.VM_PATH }}

            # üè∑Ô∏è Determina ambiente com limites de mem√≥ria
            # üß† Otimiza√ß√£o para VM de 1GB RAM - PRODU√á√ÉO PRIORIT√ÅRIA
            # Total dispon√≠vel: ~900MB (sistema usa ~100MB)
            # Estrat√©gia: Produ√ß√£o sempre ativa + Ambientes tempor√°rios
            # Produ√ß√£o: 400MB, Nginx: 50MB, Sistema: 100MB, Buffer: 350MB
            
            if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
              ENV="preview"
              PORT="8082"
              MEMORY_LIMIT="150m"      # 150MB para preview (tempor√°rio)
              JAVA_OPTS="-Xms24m -Xmx96m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication"
              IS_TEMPORARY=true
            else
              BRANCH="${GITHUB_REF#refs/heads/}"
              case "$BRANCH" in
                "main")
                  ENV="prod"
                  PORT="8080"
                  MEMORY_LIMIT="400m"  # 400MB para produ√ß√£o (priorit√°rio)
                  JAVA_OPTS="-Xms64m -Xmx320m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication"
                  IS_TEMPORARY=false
                  ;;
                "develop")
                  ENV="staging"
                  PORT="8081"
                  MEMORY_LIMIT="200m"  # 200MB para staging (tempor√°rio)
                  JAVA_OPTS="-Xms32m -Xmx128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication"
                  IS_TEMPORARY=true
                  ;;
                *)
                  echo "üö´ Push detected on unsupported branch '$BRANCH'. Skipping deploy."
                  exit 0
                  ;;
              esac
            fi

            IMAGE_NAME="portfolio-backend-$ENV"
            CONTAINER_NAME="portfolio-backend-$ENV"
            
            echo "üöÄ Deploying to $ENV environment"
            echo "üìä Memory limits: $MEMORY_LIMIT total, JAVA_OPTS: $JAVA_OPTS"
            
            # üß† Verificar mem√≥ria dispon√≠vel
            echo "üîç Checking system memory..."
            free -h
            echo "üíæ Available memory: $(free -m | awk 'NR==2{printf "%.1f%%", $3*100/$2 }')"
            
            # ‚ö†Ô∏è Aviso se mem√≥ria baixa
            AVAILABLE_MB=$(free -m | awk 'NR==2{print $7}')
            if [ $AVAILABLE_MB -lt 200 ]; then
              echo "‚ö†Ô∏è WARNING: Low memory available ($AVAILABLE_MB MB). Consider upgrading VM."
            fi

            # üê≥ Verifica Docker
            if ! command -v docker &> /dev/null; then
              echo "üì¶ Installing Docker..."
              curl -fsSL https://get.docker.com | sudo sh
              sudo systemctl enable docker
            fi
            
            # üîß Configurar swap para evitar OOM
            echo "üíæ Configuring swap for memory safety..."
            if [ ! -f /swapfile ]; then
              sudo fallocate -l 1G /swapfile
              sudo chmod 600 /swapfile
              sudo mkswap /swapfile
              sudo swapon /swapfile
              echo '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab
              echo "‚úÖ Swap file created (1GB)"
            else
              echo "‚úÖ Swap file already exists"
            fi
            
            # üßπ Limpar containers antigos para liberar mem√≥ria
            echo "üßπ Cleaning up old containers and images..."
            sudo docker system prune -af --filter "until=24h" || true
            sudo docker volume prune -f || true

            # üîê Configura certificados SSL
            echo "üîê Setting up SSL certificates..."
            mkdir -p ssl
            
            # Verificar se √© dom√≠nio real ou IP/localhost
            if [[ "${{ env.VM_HOST }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] || [ "${{ env.VM_HOST }}" = "localhost" ] || [ "${{ env.VM_HOST }}" = "127.0.0.1" ]; then
              echo "üè† Usando certificados auto-assinados para IP/localhost: ${{ env.VM_HOST }}"
              sudo openssl req -x509 -newkey rsa:4096 -keyout ssl/key.pem -out ssl/cert.pem -days 3650 -nodes \
                -subj "/C=BR/ST=SP/L=SaoPaulo/O=Portfolio/OU=IT/CN=${{ env.VM_HOST }}" \
                -addext "subjectAltName=DNS:${{ env.VM_HOST }},IP:${{ env.VM_HOST }}"
            else
              echo "üåê Configurando certificados Let's Encrypt para ${{ env.VM_HOST }}"
              
              # Aguarda libera√ß√£o do lock do apt
              echo "‚è≥ Aguardando libera√ß√£o do lock do apt..."
              while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
                echo "   Lock ativo, aguardando 5s..."
                sleep 5
              done
              
              # Instalar certbot
              sudo apt-get update
              sudo apt-get install -y certbot
              
              # Verificar se certbot foi instalado
              if ! command -v certbot &> /dev/null; then
                echo "‚ùå Falha ao instalar certbot em produ√ß√£o - ABORTANDO DEPLOY"
                echo "‚ùå Produ√ß√£o deve ter apenas certificados v√°lidos do Let's Encrypt"
                exit 1
              fi
              
              echo "‚úÖ Certbot instalado com sucesso"
              
              # Gerar certificado Let's Encrypt para todos os subdom√≠nios
              sudo certbot certonly \
                --standalone \
                --non-interactive \
                --agree-tos \
                --email "${{ secrets.SSL_EMAIL || format('admin@{0}', env.VM_HOST) }}" \
                --domains "${{ env.VM_HOST }},staging.${{ env.VM_HOST }},preview.${{ env.VM_HOST }},api.${{ env.VM_HOST }}" \
                --expand
              
              # Verificar se certificados foram gerados
              if [ -f "/etc/letsencrypt/live/${{ env.VM_HOST }}/fullchain.pem" ]; then
                sudo cp "/etc/letsencrypt/live/${{ env.VM_HOST }}/fullchain.pem" ssl/cert.pem
                sudo cp "/etc/letsencrypt/live/${{ env.VM_HOST }}/privkey.pem" ssl/key.pem
                echo "‚úÖ Certificados Let's Encrypt configurados"
                
                # Configurar renova√ß√£o autom√°tica
                echo "‚è∞ Configurando renova√ß√£o autom√°tica..."
                chmod +x scripts/ssl-renew.sh
                chmod +x scripts/setup-ssl-cron.sh
                ./scripts/setup-ssl-cron.sh "${{ env.VM_HOST }}"
              else
                echo "‚ùå Falha ao gerar certificados Let's Encrypt em produ√ß√£o - ABORTANDO DEPLOY"
                echo "‚ùå Produ√ß√£o deve ter apenas certificados v√°lidos"
                exit 1
              fi
            fi
            
            # Define permiss√µes corretas
            sudo chmod 600 ssl/key.pem
            sudo chmod 644 ssl/cert.pem
            sudo chown -R $USER:$USER ssl/
            
            echo "‚úÖ SSL certificates configured successfully"

            # üèóÔ∏è Build das imagens
            echo "üî® Building Docker images..."
            
            # Verificar se diret√≥rio nginx existe
            echo "üîç Checking nginx directory..."
            ls -la
            if [ -d "./nginx" ]; then
              echo "‚úÖ Nginx directory found"
              ls -la ./nginx/
            else
              echo "‚ùå Nginx directory not found! Creating from repository..."
              
              # Criar diret√≥rio nginx
              mkdir -p nginx
              
              # Baixar arquivos do nginx do reposit√≥rio
              echo "üì• Downloading nginx files from repository..."
              curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3.raw" \
                -o nginx/Dockerfile \
                "https://api.github.com/repos/${{ github.repository }}/contents/nginx/Dockerfile?ref=${{ github.ref_name }}"
              
              curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3.raw" \
                -o nginx/nginx.conf \
                "https://api.github.com/repos/${{ github.repository }}/contents/nginx/nginx.conf?ref=${{ github.ref_name }}"
              
              # Verificar se arquivos foram baixados
              if [ -f "nginx/Dockerfile" ] && [ -f "nginx/nginx.conf" ]; then
                echo "‚úÖ Nginx files downloaded successfully"
                ls -la nginx/
              else
                echo "‚ùå Failed to download nginx files"
                exit 1
              fi
            fi
            
            sudo docker build -t $IMAGE_NAME .
            sudo docker build -t nginx-proxy ./nginx

            # üîÑ Deploy inteligente - Produ√ß√£o nunca para desnecessariamente
            echo "üîÑ Performing smart deployment for $ENV"
            
            # Verificar se produ√ß√£o est√° rodando
            if [ "$ENV" = "prod" ]; then
              echo "üè≠ PRODUCTION DEPLOY - Updating existing container"
              # Para produ√ß√£o, apenas atualiza o container existente
              sudo docker stop $CONTAINER_NAME 2>/dev/null || true
              sudo docker rm $CONTAINER_NAME 2>/dev/null || true
            else
              echo "üß™ TEMPORARY ENVIRONMENT - $ENV"
              # Para staging/preview, para containers tempor√°rios se necess√°rio
              if [ "$IS_TEMPORARY" = "true" ]; then
                echo "üßπ Stopping other temporary environments to free memory..."
                sudo docker stop portfolio-backend-staging 2>/dev/null || true
                sudo docker rm portfolio-backend-staging 2>/dev/null || true
                sudo docker stop portfolio-backend-preview 2>/dev/null || true
                sudo docker rm portfolio-backend-preview 2>/dev/null || true
              fi
              sudo docker stop $CONTAINER_NAME 2>/dev/null || true
              sudo docker rm $CONTAINER_NAME 2>/dev/null || true
            fi
            
            # Nginx s√≥ √© recriado se n√£o existir ou se for produ√ß√£o
            if ! sudo docker inspect nginx-proxy &>/dev/null || [ "$ENV" = "prod" ]; then
              echo "üåê Updating nginx configuration..."
              sudo docker stop nginx-proxy 2>/dev/null || true
              sudo docker rm nginx-proxy 2>/dev/null || true
            else
              echo "üåê Nginx already running, keeping it active"
            fi

            # üöÄ Executa containers com limites de mem√≥ria
            echo "üéØ Starting containers with memory limits..."
            
            # Backend container com otimiza√ß√µes para 1GB RAM
            sudo docker run -d \
              --name $CONTAINER_NAME \
              --memory=$MEMORY_LIMIT \
              --memory-swap=$MEMORY_LIMIT \
              --cpus="0.5" \
              --oom-kill-disable=false \
              --memory-reservation=$(echo $MEMORY_LIMIT | sed 's/m//' | awk '{print int($1*0.8)"m"}') \
              -e JAVA_OPTS="$JAVA_OPTS" \
              -e SPRING_PROFILES_ACTIVE=production \
              -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS="${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }}" \
              --restart unless-stopped \
              --health-cmd="curl -f http://localhost:8080/actuator/health || exit 1" \
              --health-interval=30s \
              --health-timeout=10s \
              --health-retries=3 \
              $IMAGE_NAME

            # Nginx container otimizado para 1GB RAM
            if ! sudo docker inspect nginx-proxy &>/dev/null; then
              echo "üåê Starting nginx container..."
              sudo docker run -d \
                --name nginx-proxy \
                --memory=50m \
                --memory-swap=50m \
                --cpus="0.1" \
                --oom-kill-disable=false \
                --memory-reservation=40m \
                -p 80:80 \
                -p 443:443 \
                -v $(pwd)/ssl:/etc/nginx/ssl:ro \
                --restart unless-stopped \
                --health-cmd="wget --no-verbose --tries=1 --spider http://localhost/nginx_status || exit 1" \
                --health-interval=30s \
                --health-timeout=5s \
                --health-retries=3 \
                nginx-proxy
            else
              echo "üåê Nginx already running, linking to $CONTAINER_NAME..."
              # Linkar o novo container ao nginx existente
              sudo docker network connect bridge $CONTAINER_NAME 2>/dev/null || true
            fi

            # üîç Verifica√ß√£o P√≥s-Deploy
            echo "‚úÖ Deployment completed! Verifying..."
            sleep 10

            echo "üìã Container status:"
            sudo docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            sudo docker ps --filter "name=nginx-proxy" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            echo "üìä Memory usage:"
            sudo docker stats $CONTAINER_NAME --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" || true
            sudo docker stats nginx-proxy --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" || true
            
            # üß† Verificar uso de mem√≥ria do sistema
            echo "üîç System memory after deploy:"
            free -h
            echo "üíæ Memory usage: $(free -m | awk 'NR==2{printf "%.1f%%", $3*100/$2 }')"
            
            # ‚ö†Ô∏è Alertas de mem√≥ria inteligentes
            USED_MB=$(free -m | awk 'NR==2{print $3}')
            TOTAL_MB=$(free -m | awk 'NR==2{print $2}')
            USAGE_PERCENT=$((USED_MB * 100 / TOTAL_MB))
            
            # Verificar containers ativos
            ACTIVE_CONTAINERS=$(sudo docker ps --format "{{.Names}}" | grep -E "(portfolio-backend|nginx)" | wc -l)
            echo "üìä Active containers: $ACTIVE_CONTAINERS"
            
            if [ $USAGE_PERCENT -gt 90 ]; then
              echo "üö® CRITICAL: Memory usage is ${USAGE_PERCENT}%! Stopping temporary environments..."
              # Parar ambientes tempor√°rios em caso de mem√≥ria cr√≠tica
              sudo docker stop portfolio-backend-staging 2>/dev/null || true
              sudo docker stop portfolio-backend-preview 2>/dev/null || true
              echo "üßπ Temporary environments stopped to free memory"
            elif [ $USAGE_PERCENT -gt 80 ]; then
              echo "‚ö†Ô∏è WARNING: Memory usage is ${USAGE_PERCENT}%. Monitor closely."
              if [ "$IS_TEMPORARY" = "true" ]; then
                echo "üß™ Temporary environment deployed - will be stopped if memory gets critical"
              fi
            else
              echo "‚úÖ Memory usage is healthy: ${USAGE_PERCENT}%"
            fi

            if sudo docker inspect $CONTAINER_NAME &>/dev/null && sudo docker inspect nginx-proxy &>/dev/null; then
              echo "üíö SUCCESS: Containers deployed successfully!"
              echo "üåê Access:"
              echo "   - HTTP:  http://${{ env.VM_HOST }}/actuator/health"
              echo "   - HTTPS: https://${{ env.VM_HOST }}/actuator/health"
              echo "   - API:   https://${{ env.VM_HOST }}/api/"
            
              # üìù Logs iniciais para debug
              echo "üìã Application logs (last 10 lines):"
              sudo docker logs --tail 10 $CONTAINER_NAME
              echo "üìã Nginx logs (last 5 lines):"
              sudo docker logs --tail 5 nginx-proxy
            else
              echo "‚ùå ERROR: One or more containers failed to start"
              sudo docker logs $CONTAINER_NAME 2>/dev/null || echo "No backend logs available"
              sudo docker logs nginx-proxy 2>/dev/null || echo "No nginx logs available"
              exit 1
            fi

            # üßπ Cleanup de imagens antigas
            echo "üßπ Cleaning up old images..."
            sudo docker image prune -af --filter "until=48h"
