name: Deploy Backend to VM

on:
  push:
    branches:
      - main
      - develop
      - feature/*

env:
  VM_HOST: ${{ secrets.BACKEND_VM_IP }}
  VM_USER: ${{ secrets.BACKEND_VM_USER }}
  VM_SSH_KEY: ${{ secrets.BACKEND_VM_SSH_KEY }}
  VM_PATH: /home/ubuntu/backend
  JAR_NAME: portfolio-backend-0.0.1-SNAPSHOT.jar

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1  # 🔽 Baixa apenas o commit atual

      - name: Setup Java and Cache
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'  # 🔼 Cache das dependências Maven

      - name: Build JAR with caching
        run: |
          chmod +x ./mvnw
          ./mvnw -B clean package -DskipTests -T 1C  # 🔼 Paralelismo

      - name: Verify and prepare artifacts
        run: |
          ls -la target/$JAR_NAME
          [ -s target/$JAR_NAME ] || exit 1
          cp target/$JAR_NAME .  # ✅ Compatível com Dockerfile

      - name: Setup SSH connection
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          port: 22
          script: |
            mkdir -p ${{ env.VM_PATH }}
            echo "VM directory ready"

      - name: Copy artifacts to VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          source: "${{ env.JAR_NAME }},Dockerfile"
          target: ${{ env.VM_PATH }}
          overwrite: true

      - name: Deploy Docker container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            # 🏷️ Determina ambiente pela branch
            BRANCH="${GITHUB_REF##*/}"
            case "$BRANCH" in
              "main") ENV="prod" ;;
              "develop") ENV="staging" ;;
              *) ENV="dev" ;;
            esac
            
            IMAGE_NAME="portfolio-backend-$ENV"
            CONTAINER_NAME="portfolio-backend-$ENV"
            echo "🚀 Deploying to $ENV environment"
            
            # 🐳 Verifica se Docker está instalado
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              curl -fsSL https://get.docker.com | sudo sh
              sudo systemctl enable docker
            fi
            
            # 🏗️ Build da imagem com cache e build args
            echo "🔨 Building Docker image: $IMAGE_NAME"
            sudo docker build \
              --build-arg JAR_FILE=$JAR_NAME \
              -t $IMAGE_NAME:latest \
              -t $IMAGE_NAME:$GITHUB_SHA \
              .
            
            # 🔄 Rolling update
            echo "🔄 Performing rolling update"
            sudo docker stop $CONTAINER_NAME 2>/dev/null || true
            sudo docker rm $CONTAINER_NAME 2>/dev/null || true
            
            # 🚀 Executa container
            echo "🎯 Starting container: $CONTAINER_NAME"
            sudo docker run -d \
              --name $CONTAINER_NAME \
              --network host \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=$ENV \
              -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS="${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }}" \
              --restart unless-stopped \
              --health-cmd="curl -f http://localhost:8080/actuator/health || exit 1" \
              --health-interval=30s \
              --health-timeout=5s \
              --health-start-period=40s \
              $IMAGE_NAME:latest
            
            # 🧹 Cleanup
            echo "🧹 Cleaning up old images..."
            sudo docker image prune -af --filter "until=48h"
            
            echo "✅ Deployment completed successfully!"
            
