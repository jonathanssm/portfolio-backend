name: Portfolio Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

concurrency:
  group: portfolio-backend-${{ github.ref_name }}
  cancel-in-progress: true

env:
  VM_HOST: ${{ secrets.BACKEND_VM_IP }}
  VM_USER: ${{ secrets.BACKEND_VM_USER }}
  VM_SSH_KEY: ${{ secrets.BACKEND_VM_SSH_KEY }}
  VM_PATH: /home/ubuntu/portfolio-backend
  JAR_NAME: portfolio-backend-0.0.1-SNAPSHOT.jar
  CONTAINER_NAME: portfolio-backend-prod
  NGINX_CONTAINER: nginx-proxy

jobs:
  # üîç Validation and Tests (always runs)
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java and Cache
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Validate code quality
        run: |
          chmod +x ./mvnw
          ./mvnw -B clean compile test -T 1C
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Build and tests passed successfully"
          else
            echo "‚ùå Build or tests failed"
            exit 1
          fi

      - name: Check for security vulnerabilities
        run: |
          echo "üîç Checking for known vulnerabilities..."
          ./mvnw versions:display-dependency-updates || echo "‚ö†Ô∏è Dependency check failed, but continuing..."
          echo "‚úÖ Basic security check completed"

  # üß™ Test Deploy (validation only for develop)
  test-deploy:
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'push' && github.ref_name == 'develop'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test deploy configuration
        run: |
          echo "üß™ Testing deploy configuration for develop branch"
          echo "‚úÖ Build artifacts validated"
          echo "‚úÖ Deploy configuration test passed"
          echo "‚ÑπÔ∏è No actual deployment for develop branch (VM has limited resources)"

  # üöÄ Production Deploy (only for main)
  deploy:
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref_name == 'main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java and Cache
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build JAR with verification
        run: |
          chmod +x ./mvnw
          ./mvnw -B clean package -DskipTests -T 1C
          
          echo "Verifying JAR file..."
          if [ ! -f "target/$JAR_NAME" ]; then
            echo "‚ùå JAR file not found in target/"
            ls -la target/
            exit 1
          fi
          
          if [ ! -s "target/$JAR_NAME" ]; then
            echo "‚ùå JAR file is empty"
            ls -lh target/
            exit 1
          fi
          
          if file "target/$JAR_NAME" | grep -q "Java archive"; then
            echo "‚úÖ JAR file is valid"
          else
            echo "‚ùå JAR file is not a valid Java archive"
            file "target/$JAR_NAME"
            exit 1
          fi

      - name: Prepare artifacts
        run: |
          cp target/$JAR_NAME .
          ls -la $JAR_NAME Dockerfile

      - name: Setup VM directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            mkdir -p ${{ env.VM_PATH }}
            cd ${{ env.VM_PATH }}
            rm -rf *.jar Dockerfile 2>/dev/null || true
            echo "VM directory cleaned and ready"

      - name: Copy artifacts to VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          source: "${{ env.JAR_NAME }},Dockerfile"
          target: ${{ env.VM_PATH }}
          overwrite: true

      - name: Verify artifacts on VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "üì¶ Verifying artifacts on VM..."
            ls -la
            
            if [ ! -f "${{ env.JAR_NAME }}" ]; then
              echo "‚ùå JAR not found on VM"
              exit 1
            fi
            
            if [ ! -s "${{ env.JAR_NAME }}" ]; then
              echo "‚ùå JAR is empty on VM"
              exit 1
            fi
            
            echo "‚úÖ All artifacts verified successfully"

      - name: üßπ Cleanup and Prepare Environment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}

            echo "üßπ Cleaning up environment..."
            
            # Stop and remove existing containers
            sudo docker stop ${{ env.CONTAINER_NAME }} ${{ env.NGINX_CONTAINER }} 2>/dev/null || true
            sudo docker rm ${{ env.CONTAINER_NAME }} ${{ env.NGINX_CONTAINER }} 2>/dev/null || true
            
            # Remove old images to free space
            sudo docker rmi portfolio-backend-prod nginx-proxy 2>/dev/null || true
            
            # Clean up Docker network
            sudo docker network rm portfolio-network 2>/dev/null || true
            
            # Clean up Docker system
            sudo docker system prune -af --filter "until=24h" || true
            
            # Ensure Docker is running
            if ! sudo systemctl is-active --quiet docker; then
              echo "üê≥ Starting Docker service..."
              sudo systemctl start docker
            fi
            
            echo "‚úÖ Environment cleaned and ready"

      - name: üîê Setup SSL Certificates
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "üîê Setting up SSL certificates..."
            mkdir -p ssl
            
            # Create self-signed certificate first (always works)
            echo "üè† Creating self-signed certificate..."
            
            if [[ "${{ env.VM_HOST }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              SAN="IP:${{ env.VM_HOST }}"
            else
              SAN="DNS:${{ env.VM_HOST }}"
              # Try to resolve IP
              RESOLVED_IP=$(nslookup ${{ env.VM_HOST }} 2>/dev/null | grep "Address:" | tail -1 | awk '{print $2}' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' || echo "")
              if [ ! -z "$RESOLVED_IP" ]; then
                SAN="${SAN},IP:${RESOLVED_IP}"
              fi
            fi
            
              sudo openssl req -x509 -newkey rsa:4096 -keyout ssl/key.pem -out ssl/cert.pem -days 3650 -nodes \
                -subj "/C=BR/ST=SP/L=SaoPaulo/O=Portfolio/OU=IT/CN=${{ env.VM_HOST }}" \
              -addext "subjectAltName=${SAN}"
            
            # Try Let's Encrypt for real domains
            if [[ ! "${{ env.VM_HOST }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] && [ "${{ env.VM_HOST }}" != "localhost" ] && [ "${{ env.VM_HOST }}" != "127.0.0.1" ]; then
              echo "üåê Attempting Let's Encrypt certificate..."
              
              # Install certbot if not available
              if ! command -v certbot &> /dev/null; then
                sudo apt-get update && sudo apt-get install -y certbot
              fi
              
              # Try to get Let's Encrypt certificate
              if sudo certbot certonly --standalone --non-interactive --agree-tos \
                --email "admin@${{ env.VM_HOST }}" \
                --domains "${{ env.VM_HOST }}" \
                --expand 2>/dev/null; then
                
              if [ -f "/etc/letsencrypt/live/${{ env.VM_HOST }}/fullchain.pem" ]; then
                sudo cp "/etc/letsencrypt/live/${{ env.VM_HOST }}/fullchain.pem" ssl/cert.pem
                sudo cp "/etc/letsencrypt/live/${{ env.VM_HOST }}/privkey.pem" ssl/key.pem
                  echo "‚úÖ Let's Encrypt certificate configured"
                  
                  # Setup auto-renewal
                  (crontab -l 2>/dev/null; echo "0 2 * * * certbot renew --quiet") | crontab - 2>/dev/null || true
                else
                  echo "‚ö†Ô∏è Let's Encrypt failed, using self-signed certificate"
                fi
              else
                echo "‚ö†Ô∏è Let's Encrypt failed, using self-signed certificate"
              fi
            else
              echo "üè† Using self-signed certificate for IP/localhost"
            fi
            
            # Set correct permissions
            sudo chmod 600 ssl/key.pem
            sudo chmod 644 ssl/cert.pem
            sudo chown -R $USER:$USER ssl/
            
            echo "‚úÖ SSL certificates configured"

      - name: üåê Setup Nginx Configuration
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "üåê Setting up Nginx configuration..."
            
            # Create nginx directory if not exists
              mkdir -p nginx
              
            # Download nginx files from repository
            echo "üì• Downloading nginx configuration..."
              curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3.raw" \
                -o nginx/Dockerfile \
              "https://api.github.com/repos/${{ github.repository }}/contents/nginx/Dockerfile?ref=main"
              
              curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                -H "Accept: application/vnd.github.v3.raw" \
                -o nginx/nginx.conf \
              "https://api.github.com/repos/${{ github.repository }}/contents/nginx/nginx.conf?ref=main"
            
            # Simplify nginx.conf for single production environment
            echo "üîß Simplifying nginx configuration for production..."
            
            # Create a clean production-only nginx.conf using echo
            echo "user nginx;" > nginx/nginx.conf
            echo "worker_processes auto;" >> nginx/nginx.conf
            echo "error_log /var/log/nginx/error.log notice;" >> nginx/nginx.conf
            echo "pid /var/run/nginx.pid;" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "events {" >> nginx/nginx.conf
            echo "    worker_connections 1024;" >> nginx/nginx.conf
            echo "    use epoll;" >> nginx/nginx.conf
            echo "    multi_accept on;" >> nginx/nginx.conf
            echo "}" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "http {" >> nginx/nginx.conf
            echo "    include /etc/nginx/mime.types;" >> nginx/nginx.conf
            echo "    default_type application/octet-stream;" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "    # Logging" >> nginx/nginx.conf
            echo "    log_format main '\$remote_addr - \$remote_user [\$time_local] \"\$request\" '" >> nginx/nginx.conf
            echo "                    '\$status \$body_bytes_sent \"\$http_referer\" '" >> nginx/nginx.conf
            echo "                    '\"\$http_user_agent\" \"\$http_x_forwarded_for\"';" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "    access_log /var/log/nginx/access.log main;" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "    # Performance" >> nginx/nginx.conf
            echo "    sendfile on;" >> nginx/nginx.conf
            echo "    tcp_nopush on;" >> nginx/nginx.conf
            echo "    tcp_nodelay on;" >> nginx/nginx.conf
            echo "    keepalive_timeout 65;" >> nginx/nginx.conf
            echo "    types_hash_max_size 2048;" >> nginx/nginx.conf
            echo "    client_max_body_size 10M;" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "    # Gzip compression" >> nginx/nginx.conf
            echo "    gzip on;" >> nginx/nginx.conf
            echo "    gzip_vary on;" >> nginx/nginx.conf
            echo "    gzip_min_length 1024;" >> nginx/nginx.conf
            echo "    gzip_proxied any;" >> nginx/nginx.conf
            echo "    gzip_comp_level 6;" >> nginx/nginx.conf
            echo "    gzip_types" >> nginx/nginx.conf
            echo "        text/plain" >> nginx/nginx.conf
            echo "        text/css" >> nginx/nginx.conf
            echo "        text/xml" >> nginx/nginx.conf
            echo "        text/javascript" >> nginx/nginx.conf
            echo "        application/json" >> nginx/nginx.conf
            echo "        application/javascript" >> nginx/nginx.conf
            echo "        application/xml+rss" >> nginx/nginx.conf
            echo "        application/atom+xml" >> nginx/nginx.conf
            echo "        image/svg+xml;" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "    # Rate limiting" >> nginx/nginx.conf
            echo "    limit_req_zone \$binary_remote_addr zone=api:10m rate=10r/s;" >> nginx/nginx.conf
            echo "    limit_req_zone \$binary_remote_addr zone=login:10m rate=1r/s;" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "    # Upstream backend - Production only" >> nginx/nginx.conf
            echo "    upstream backend_prod {" >> nginx/nginx.conf
            echo "        server portfolio-backend-prod:8080;" >> nginx/nginx.conf
            echo "        keepalive 32;" >> nginx/nginx.conf
            echo "    }" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "    # HTTP to HTTPS redirect" >> nginx/nginx.conf
            echo "    server {" >> nginx/nginx.conf
            echo "        listen 80;" >> nginx/nginx.conf
            echo "        server_name _;" >> nginx/nginx.conf
            echo "        return 301 https://\$host\$request_uri;" >> nginx/nginx.conf
            echo "    }" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "    # HTTPS Production Server" >> nginx/nginx.conf
            echo "    server {" >> nginx/nginx.conf
            echo "        listen 443 ssl;" >> nginx/nginx.conf
            echo "        http2 on;" >> nginx/nginx.conf
            echo "        server_name _;" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "        # SSL configuration" >> nginx/nginx.conf
            echo "        ssl_certificate /etc/nginx/ssl/cert.pem;" >> nginx/nginx.conf
            echo "        ssl_certificate_key /etc/nginx/ssl/key.pem;" >> nginx/nginx.conf
            echo "        ssl_protocols TLSv1.2 TLSv1.3;" >> nginx/nginx.conf
            echo "        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;" >> nginx/nginx.conf
            echo "        ssl_prefer_server_ciphers off;" >> nginx/nginx.conf
            echo "        ssl_session_cache shared:SSL:10m;" >> nginx/nginx.conf
            echo "        ssl_session_timeout 10m;" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "        # Security headers" >> nginx/nginx.conf
            echo "        add_header X-Frame-Options DENY;" >> nginx/nginx.conf
            echo "        add_header X-Content-Type-Options nosniff;" >> nginx/nginx.conf
            echo "        add_header X-XSS-Protection \"1; mode=block\";" >> nginx/nginx.conf
            echo "        add_header Strict-Transport-Security \"max-age=31536000; includeSubDomains\" always;" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "        # API routes" >> nginx/nginx.conf
            echo "        location /api/ {" >> nginx/nginx.conf
            echo "            limit_req zone=api burst=20 nodelay;" >> nginx/nginx.conf
            echo "            proxy_pass http://backend_prod;" >> nginx/nginx.conf
            echo "            proxy_http_version 1.1;" >> nginx/nginx.conf
            echo "            proxy_set_header Upgrade \$http_upgrade;" >> nginx/nginx.conf
            echo "            proxy_set_header Connection 'upgrade';" >> nginx/nginx.conf
            echo "            proxy_set_header Host \$host;" >> nginx/nginx.conf
            echo "            proxy_set_header X-Real-IP \$remote_addr;" >> nginx/nginx.conf
            echo "            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;" >> nginx/nginx.conf
            echo "            proxy_set_header X-Forwarded-Proto \$scheme;" >> nginx/nginx.conf
            echo "            proxy_cache_bypass \$http_upgrade;" >> nginx/nginx.conf
            echo "            proxy_read_timeout 300s;" >> nginx/nginx.conf
            echo "            proxy_connect_timeout 75s;" >> nginx/nginx.conf
            echo "        }" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "        # Health check" >> nginx/nginx.conf
            echo "        location /api/actuator/health {" >> nginx/nginx.conf
            echo "            proxy_pass http://backend_prod;" >> nginx/nginx.conf
            echo "            proxy_http_version 1.1;" >> nginx/nginx.conf
            echo "            proxy_set_header Host \$host;" >> nginx/nginx.conf
            echo "            proxy_set_header X-Real-IP \$remote_addr;" >> nginx/nginx.conf
            echo "            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;" >> nginx/nginx.conf
            echo "            proxy_set_header X-Forwarded-Proto \$scheme;" >> nginx/nginx.conf
            echo "            access_log off;" >> nginx/nginx.conf
            echo "        }" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "        # Root and other routes" >> nginx/nginx.conf
            echo "        location / {" >> nginx/nginx.conf
            echo "            proxy_pass http://backend_prod;" >> nginx/nginx.conf
            echo "            proxy_http_version 1.1;" >> nginx/nginx.conf
            echo "            proxy_set_header Host \$host;" >> nginx/nginx.conf
            echo "            proxy_set_header X-Real-IP \$remote_addr;" >> nginx/nginx.conf
            echo "            proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;" >> nginx/nginx.conf
            echo "            proxy_set_header X-Forwarded-Proto \$scheme;" >> nginx/nginx.conf
            echo "            proxy_read_timeout 300s;" >> nginx/nginx.conf
            echo "            proxy_connect_timeout 75s;" >> nginx/nginx.conf
            echo "        }" >> nginx/nginx.conf
            echo "" >> nginx/nginx.conf
            echo "        # Nginx status for monitoring" >> nginx/nginx.conf
            echo "        location /nginx_status {" >> nginx/nginx.conf
            echo "            stub_status on;" >> nginx/nginx.conf
            echo "            access_log off;" >> nginx/nginx.conf
            echo "            allow 127.0.0.1;" >> nginx/nginx.conf
            echo "            allow 172.16.0.0/12;" >> nginx/nginx.conf
            echo "            allow 192.168.0.0/16;" >> nginx/nginx.conf
            echo "            allow 10.0.0.0/8;" >> nginx/nginx.conf
            echo "            deny all;" >> nginx/nginx.conf
            echo "        }" >> nginx/nginx.conf
            echo "    }" >> nginx/nginx.conf
            echo "}" >> nginx/nginx.conf
            
            echo "‚úÖ Nginx configuration ready"

      - name: üèóÔ∏è Build and Deploy Application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "üèóÔ∏è Building and deploying application..."
            
            # Build Docker images
            echo "üî® Building application image..."
            sudo docker build -t portfolio-backend-prod .
            
            echo "üî® Building nginx image..."
            sudo docker build -t nginx-proxy ./nginx
            
            # Create Docker network for communication
            echo "üåê Creating Docker network..."
            sudo docker network create portfolio-network 2>/dev/null || echo "Network already exists"
            
            # Deploy application container
            echo "üöÄ Starting application container..."
            sudo docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --network portfolio-network \
              --memory=600m \
              --memory-swap=600m \
              --cpus="0.6" \
              --restart unless-stopped \
              --health-cmd="curl -f http://localhost:8080/api/actuator/health || exit 1" \
              --health-interval=60s \
              --health-timeout=30s \
              --health-retries=5 \
              --health-start-period=120s \
              -e JAVA_OPTS="-Xms128m -Xmx480m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:+UseStringDeduplication -XX:+UseCompressedOops -XX:+UseContainerSupport" \
              -e SPRING_PROFILES_ACTIVE=production \
              -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS="${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }}" \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=validate \
              -e SPRING_JPA_HIBERNATE_SHOW_SQL=false \
              -e LOGGING_LEVEL_ORG_HIBERNATE=ERROR \
              -e LOGGING_LEVEL_ORG_SPRINGFRAMEWORK=WARN \
              portfolio-backend-prod
            
            # Deploy nginx container
              echo "üåê Starting nginx container..."
              sudo docker run -d \
              --name ${{ env.NGINX_CONTAINER }} \
              --network portfolio-network \
              --memory=40m \
              --memory-swap=40m \
              --cpus="0.1" \
              --restart unless-stopped \
                -p 80:80 \
                -p 443:443 \
                -v $(pwd)/ssl:/etc/nginx/ssl:ro \
                --health-cmd="wget --no-verbose --tries=1 --spider http://localhost/nginx_status || curl -f http://localhost/nginx_status || exit 1" \
                --health-interval=30s \
                --health-timeout=5s \
                --health-retries=3 \
                nginx-proxy
            
            echo "‚úÖ Application deployed successfully"
            
            # Try Let's Encrypt with proper port management
            echo "üîÑ Attempting Let's Encrypt certificate..."
            if [[ ! "${{ env.VM_HOST }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] && [ "${{ env.VM_HOST }}" != "localhost" ] && [ "${{ env.VM_HOST }}" != "127.0.0.1" ]; then
              # Check if port 80 is free
              if ! sudo lsof -i :80 >/dev/null 2>&1; then
                echo "‚úÖ Port 80 is free, attempting Let's Encrypt..."
                
                # Try Let's Encrypt
                if sudo certbot certonly --standalone --non-interactive --agree-tos \
                  --email "admin@${{ env.VM_HOST }}" \
                  --domains "${{ env.VM_HOST }}" \
                  --expand 2>/dev/null; then
                  
                  if [ -f "/etc/letsencrypt/live/${{ env.VM_HOST }}/fullchain.pem" ]; then
                    sudo cp "/etc/letsencrypt/live/${{ env.VM_HOST }}/fullchain.pem" ssl/cert.pem
                    sudo cp "/etc/letsencrypt/live/${{ env.VM_HOST }}/privkey.pem" ssl/key.pem
                    echo "‚úÖ Let's Encrypt certificate configured successfully!"
                    
                    # Setup auto-renewal
                    (crontab -l 2>/dev/null; echo "0 2 * * * certbot renew --quiet") | crontab - 2>/dev/null || true
                    
                    # Restart nginx to use new certificate
                    echo "üîÑ Restarting nginx with Let's Encrypt certificate..."
                    sudo docker restart nginx-proxy
                  fi
                else
                  echo "‚ö†Ô∏è Let's Encrypt failed - check DNS propagation and firewall"
                fi
              else
                echo "‚ö†Ô∏è Port 80 is occupied - Let's Encrypt skipped"
                echo "üîß To get valid certificate:"
                echo "   1. Stop nginx: sudo docker stop nginx-proxy"
                echo "   2. Run: sudo certbot certonly --standalone -d ${{ env.VM_HOST }}"
                echo "   3. Start nginx: sudo docker start nginx-proxy"
              fi
            else
              echo "üè† Using self-signed certificate for IP/localhost"
            fi

      - name: ‚úÖ Verify Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "‚úÖ Verifying deployment..."
            
            # Wait for containers to start (Spring Boot needs more time)
            echo "‚è≥ Waiting for application to fully start..."
            sleep 120
            
            # Check container status
            echo "üìã Container status:"
            sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Check application health with retry logic
            echo "üîç Checking application health..."
            MAX_RETRIES=15
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if sudo docker exec ${{ env.CONTAINER_NAME }} curl -f http://localhost:8080/api/actuator/health >/dev/null 2>&1; then
                echo "‚úÖ Application is healthy"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "‚è≥ Application not ready yet (attempt $RETRY_COUNT/$MAX_RETRIES)..."
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  sleep 20
                fi
              fi
            done
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "‚ùå Application health check failed after $MAX_RETRIES attempts"
              echo "üìã Container status:"
              sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              echo "üìã Application logs:"
              sudo docker logs --tail 30 ${{ env.CONTAINER_NAME }}
              exit 1
            fi
            
            # Check nginx status with retry logic
            echo "üåê Checking nginx health..."
            NGINX_RETRY_COUNT=0
            NGINX_MAX_RETRIES=10
            
            # Wait for nginx to stabilize (it was restarting)
            echo "‚è≥ Waiting for nginx to stabilize..."
            sleep 30
            
            while [ $NGINX_RETRY_COUNT -lt $NGINX_MAX_RETRIES ]; do
              # Check if nginx is running (not restarting)
              NGINX_STATUS=$(sudo docker ps --format "{{.Status}}" --filter "name=${{ env.NGINX_CONTAINER }}" | head -1)
              if echo "$NGINX_STATUS" | grep -q "Up" && ! echo "$NGINX_STATUS" | grep -q "Restarting"; then
                if sudo docker exec ${{ env.NGINX_CONTAINER }} wget --no-verbose --tries=1 --spider https://localhost/nginx_status --no-check-certificate >/dev/null 2>&1; then
                  echo "‚úÖ Nginx is healthy"
                  break
                fi
              fi
              
              NGINX_RETRY_COUNT=$((NGINX_RETRY_COUNT + 1))
              echo "‚è≥ Nginx not ready yet (attempt $NGINX_RETRY_COUNT/$NGINX_MAX_RETRIES) - Status: $NGINX_STATUS"
              if [ $NGINX_RETRY_COUNT -lt $NGINX_MAX_RETRIES ]; then
                sleep 15
              fi
            done
            
            if [ $NGINX_RETRY_COUNT -eq $NGINX_MAX_RETRIES ]; then
              echo "‚ùå Nginx health check failed after $NGINX_MAX_RETRIES attempts"
              echo "üìã Nginx status:"
              sudo docker ps --filter "name=${{ env.NGINX_CONTAINER }}"
              echo "üìã Nginx logs:"
              sudo docker logs --tail 30 ${{ env.NGINX_CONTAINER }}
              exit 1
            fi

            # Check SSL certificate
            echo "üîê Checking SSL certificate..."
            if [ -f "ssl/cert.pem" ]; then
              CERT_ISSUER=$(openssl x509 -in ssl/cert.pem -noout -issuer 2>/dev/null | cut -d= -f2- || echo "Unknown")
              if echo "$CERT_ISSUER" | grep -q "Let's Encrypt"; then
                echo "‚úÖ Valid Let's Encrypt certificate configured"
                echo "üîí Browser will show green lock"
              else
                echo "‚ö†Ô∏è Self-signed certificate configured"
                echo "üîì Browser will show security warning"
              fi
            fi
            
            # Show memory usage
            echo "üìä Memory usage:"
            sudo docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"
            
            echo ""
            echo "üéâ Deployment completed successfully!"
            echo "üåê Access URLs:"
            echo "   - HTTP:  http://${{ env.VM_HOST }}/api/actuator/health"
            echo "   - HTTPS: https://${{ env.VM_HOST }}/api/actuator/health"
            echo "   - API:   https://${{ env.VM_HOST }}/api/"
