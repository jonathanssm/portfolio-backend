name: Portfolio Backend CI/CD

on:
  push:
    branches: [main, develop]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]

concurrency:
  group: portfolio-backend-${{ github.ref_name }}
  cancel-in-progress: true

env:
  VM_HOST: ${{ secrets.BACKEND_VM_IP }}
  VM_USER: ${{ secrets.BACKEND_VM_USER }}
  VM_SSH_KEY: ${{ secrets.BACKEND_VM_SSH_KEY }}
  VM_PATH: /home/ubuntu/portfolio-backend
  JAR_NAME: portfolio-backend-0.0.1-SNAPSHOT.jar
  CONTAINER_NAME: portfolio-backend-prod
  NGINX_CONTAINER: nginx-proxy

jobs:
  # üîç Validation and Tests (always runs)
  validate:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Java and Cache
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Validate code quality
        run: |
          chmod +x ./mvnw
          ./mvnw -B clean compile test -T 1C
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Build and tests passed successfully"
          else
            echo "‚ùå Build or tests failed"
            exit 1
          fi

      - name: Check for security vulnerabilities
        run: |
          echo "üîç Checking for known vulnerabilities..."
          ./mvnw versions:display-dependency-updates || echo "‚ö†Ô∏è Dependency check failed, but continuing..."
          echo "‚úÖ Basic security check completed"

  # üß™ Test Deploy (validation only for develop)
  test-deploy:
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: github.event_name == 'push' && github.ref_name == 'develop'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test deploy configuration
        run: |
          echo "üß™ Testing deploy configuration for develop branch"
          echo "‚úÖ Build artifacts validated"
          echo "‚úÖ Deploy configuration test passed"
          echo "‚ÑπÔ∏è No actual deployment for develop branch (VM has limited resources)"

  # üöÄ Production Deploy (only for main)
  deploy:
    needs: validate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: github.event_name == 'push' && github.ref_name == 'main'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java and Cache
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build JAR with verification
        run: |
          chmod +x ./mvnw
          ./mvnw -B clean package -DskipTests -T 1C
          
          echo "Verifying JAR file..."
          if [ ! -f "target/$JAR_NAME" ]; then
            echo "‚ùå JAR file not found in target/"
            ls -la target/
            exit 1
          fi
          
          if [ ! -s "target/$JAR_NAME" ]; then
            echo "‚ùå JAR file is empty"
            ls -lh target/
            exit 1
          fi
          
          if file "target/$JAR_NAME" | grep -q "Java archive"; then
            echo "‚úÖ JAR file is valid"
          else
            echo "‚ùå JAR file is not a valid Java archive"
            file "target/$JAR_NAME"
            exit 1
          fi

      - name: Prepare artifacts
        run: |
          cp target/$JAR_NAME .
          ls -la $JAR_NAME Dockerfile

      - name: Setup VM directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            mkdir -p ${{ env.VM_PATH }}
            cd ${{ env.VM_PATH }}
            rm -rf *.jar Dockerfile 2>/dev/null || true
            echo "VM directory cleaned and ready"

      - name: Copy artifacts to VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          source: "${{ env.JAR_NAME }},Dockerfile"
          target: ${{ env.VM_PATH }}
          overwrite: true

      - name: Verify artifacts on VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "üì¶ Verifying artifacts on VM..."
            ls -la
            
            if [ ! -f "${{ env.JAR_NAME }}" ]; then
              echo "‚ùå JAR not found on VM"
              exit 1
            fi
            
            if [ ! -s "${{ env.JAR_NAME }}" ]; then
              echo "‚ùå JAR is empty on VM"
              exit 1
            fi
            
            echo "‚úÖ All artifacts verified successfully"

      - name: üßπ Cleanup and Prepare Environment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}

            echo "üßπ Cleaning up environment..."
            
            # Stop and remove existing containers
            sudo docker stop ${{ env.CONTAINER_NAME }} ${{ env.NGINX_CONTAINER }} 2>/dev/null || true
            sudo docker rm ${{ env.CONTAINER_NAME }} ${{ env.NGINX_CONTAINER }} 2>/dev/null || true
            
            # Remove old images to free space
            sudo docker rmi portfolio-backend-prod nginx-proxy 2>/dev/null || true
            
            # Clean up Docker network
            sudo docker network rm portfolio-network 2>/dev/null || true
            
            # Clean up Docker system
            sudo docker system prune -af --filter "until=24h" || true
            
            # Ensure Docker is running
            if ! sudo systemctl is-active --quiet docker; then
              echo "üê≥ Starting Docker service..."
              sudo systemctl start docker
            fi
            
            echo "‚úÖ Environment cleaned and ready"

      - name: üîê Setup SSL Certificates
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "üîê Setting up SSL certificates..."
            mkdir -p ssl
            
            # Create self-signed certificate first (always works)
            echo "üè† Creating self-signed certificate..."
            
            if [[ "${{ env.VM_HOST }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              SAN="IP:${{ env.VM_HOST }}"
            else
              SAN="DNS:${{ env.VM_HOST }}"
              # Try to resolve IP
              RESOLVED_IP=$(nslookup ${{ env.VM_HOST }} 2>/dev/null | grep "Address:" | tail -1 | awk '{print $2}' | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$' || echo "")
              if [ ! -z "$RESOLVED_IP" ]; then
                SAN="${SAN},IP:${RESOLVED_IP}"
              fi
            fi
            
              sudo openssl req -x509 -newkey rsa:4096 -keyout ssl/key.pem -out ssl/cert.pem -days 3650 -nodes \
                -subj "/C=BR/ST=SP/L=SaoPaulo/O=Portfolio/OU=IT/CN=${{ env.VM_HOST }}" \
              -addext "subjectAltName=${SAN}"
            
            # Try Let's Encrypt for real domains
            if [[ ! "${{ env.VM_HOST }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] && [ "${{ env.VM_HOST }}" != "localhost" ] && [ "${{ env.VM_HOST }}" != "127.0.0.1" ]; then
              echo "üåê Attempting Let's Encrypt certificate..."
              
              # Install certbot if not available
              if ! command -v certbot &> /dev/null; then
                sudo apt-get update && sudo apt-get install -y certbot
              fi
              
              # Try to get Let's Encrypt certificate
              if sudo certbot certonly --standalone --non-interactive --agree-tos \
                --email "admin@${{ env.VM_HOST }}" \
                --domains "${{ env.VM_HOST }}" \
                --expand 2>/dev/null; then
                
              if [ -f "/etc/letsencrypt/live/${{ env.VM_HOST }}/fullchain.pem" ]; then
                sudo cp "/etc/letsencrypt/live/${{ env.VM_HOST }}/fullchain.pem" ssl/cert.pem
                sudo cp "/etc/letsencrypt/live/${{ env.VM_HOST }}/privkey.pem" ssl/key.pem
                  echo "‚úÖ Let's Encrypt certificate configured"
                  
                  # Setup auto-renewal
                  (crontab -l 2>/dev/null; echo "0 2 * * * certbot renew --quiet") | crontab - 2>/dev/null || true
                else
                  echo "‚ö†Ô∏è Let's Encrypt failed, using self-signed certificate"
                fi
              else
                echo "‚ö†Ô∏è Let's Encrypt failed, using self-signed certificate"
              fi
            else
              echo "üè† Using self-signed certificate for IP/localhost"
            fi
            
            # Set correct permissions
            sudo chmod 600 ssl/key.pem
            sudo chmod 644 ssl/cert.pem
            sudo chown -R $USER:$USER ssl/
            
            echo "‚úÖ SSL certificates configured"

      - name: üåê Setup Nginx Configuration
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "üåê Setting up Nginx configuration..."
            
            # Create nginx directory if not exists
              mkdir -p nginx
              
            echo "‚úÖ Nginx configuration files ready (using static files)"

      - name: üèóÔ∏è Build and Deploy Application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "üèóÔ∏è Building and deploying application..."
            
            # Build Docker images
            echo "üî® Building application image..."
            sudo docker build -t portfolio-backend-prod .
            
            echo "üî® Building nginx image..."
            sudo docker build -t nginx-proxy ./nginx
            
            # Create Docker network for communication
            echo "üåê Creating Docker network..."
            sudo docker network create portfolio-network 2>/dev/null || echo "Network already exists"
            
            # Deploy application container
            echo "üöÄ Starting application container..."
            sudo docker run -d \
              --name ${{ env.CONTAINER_NAME }} \
              --network portfolio-network \
              --memory=450m \
              --memory-swap=450m \
              --cpus="0.5" \
              --restart unless-stopped \
              --health-cmd="curl -f http://localhost:8080/api/actuator/health || exit 1" \
              --health-interval=60s \
              --health-timeout=30s \
              --health-retries=5 \
              --health-start-period=120s \
              -e JAVA_OPTS="-Xms128m -Xmx350m -XX:+UseSerialGC -XX:+UseCompressedOops -XX:+UseContainerSupport -XX:MaxRAMPercentage=75" \
              -e SPRING_PROFILES_ACTIVE=production \
              -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS="${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }}" \
              -e SPRING_JPA_HIBERNATE_DDL_AUTO=validate \
              -e SPRING_JPA_HIBERNATE_SHOW_SQL=false \
              -e LOGGING_LEVEL_ORG_HIBERNATE=ERROR \
              -e LOGGING_LEVEL_ORG_SPRINGFRAMEWORK=WARN \
              -e SPRING_JPA_PROPERTIES_HIBERNATE_JDBC_BATCH_SIZE=10 \
              -e SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_INSERTS=true \
              -e SPRING_JPA_PROPERTIES_HIBERNATE_ORDER_UPDATES=true \
              -e SPRING_DATASOURCE_HIKARI_MAXIMUM_POOL_SIZE=3 \
              -e SPRING_DATASOURCE_HIKARI_MINIMUM_IDLE=1 \
              -e SPRING_MAIN_LAZY_INITIALIZATION=true \
              -e SPRING_JPA_OPEN_IN_VIEW=false \
              -e SPRING_JPA_PROPERTIES_HIBERNATE_ENABLE_LAZY_LOAD_NO_TRANS=true \
              -e SPRING_JPA_PROPERTIES_HIBERNATE_DEFAULT_BATCH_FETCH_SIZE=16 \
              portfolio-backend-prod
            
            # Deploy nginx container with temporary HTTP-only config
            echo "üåê Starting nginx container (temporary HTTP config)..."
            sudo docker run -d \
            --name ${{ env.NGINX_CONTAINER }} \
            --network portfolio-network \
            --memory=32m \
            --memory-swap=32m \
            --cpus="0.1" \
            --restart unless-stopped \
              -p 80:80 \
              -p 443:443 \
              -v $(pwd)/ssl:/etc/nginx/ssl:ro \
              -v $(pwd)/nginx/nginx-http.conf:/etc/nginx/nginx.conf \
              --health-cmd="wget --no-verbose --tries=1 --spider http://localhost/nginx_status || curl -f http://localhost/nginx_status || exit 1" \
              --health-interval=30s \
              --health-timeout=5s \
              --health-retries=3 \
              nginx-proxy
            
            # Wait for nginx to be ready
            echo "‚è≥ Waiting for nginx to be ready..."
            sleep 10
            
            # Try Let's Encrypt with nginx plugin (BEST PRACTICE)
            echo "üîÑ Attempting Let's Encrypt certificate with nginx plugin..."
            if [[ ! "${{ env.VM_HOST }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] && [ "${{ env.VM_HOST }}" != "localhost" ] && [ "${{ env.VM_HOST }}" != "127.0.0.1" ]; then
              # Install certbot with nginx plugin
              sudo apt-get update && sudo apt-get install -y certbot python3-certbot-nginx
              
              # Use nginx plugin (BEST PRACTICE)
              if sudo certbot --nginx --non-interactive --agree-tos \
                --email "admin@${{ env.VM_HOST }}" \
                --domains "${{ env.VM_HOST }}" \
                --redirect 2>/dev/null; then
                
                echo "‚úÖ Let's Encrypt certificate configured successfully with nginx plugin!"
                
                # Restart nginx to apply SSL configuration
                echo "üîÑ Restarting nginx with SSL configuration..."
                sudo docker restart ${{ env.NGINX_CONTAINER }}
                
                # Update health check to use HTTPS
                sudo docker update --health-cmd="wget --no-verbose --tries=1 --spider https://localhost/nginx_status --no-check-certificate || curl -f https://localhost/nginx_status -k || exit 1" ${{ env.NGINX_CONTAINER }}
              else
                echo "‚ö†Ô∏è Let's Encrypt failed, using self-signed certificate"
                # Fallback to HTTPS config with self-signed
                sudo docker stop ${{ env.NGINX_CONTAINER }}
                sudo docker rm ${{ env.NGINX_CONTAINER }}
                sudo docker run -d \
                --name ${{ env.NGINX_CONTAINER }} \
                --network portfolio-network \
              --memory=32m \
              --memory-swap=32m \
              --cpus="0.1" \
                --restart unless-stopped \
                  -p 80:80 \
                  -p 443:443 \
                  -v $(pwd)/ssl:/etc/nginx/ssl:ro \
                  --health-cmd="wget --no-verbose --tries=1 --spider https://localhost/nginx_status --no-check-certificate || curl -f https://localhost/nginx_status -k || exit 1" \
                  --health-interval=30s \
                  --health-timeout=5s \
                  --health-retries=3 \
                  nginx-proxy
              fi
            else
              echo "üè† Using self-signed certificate for IP/localhost"
              # Use HTTPS config with self-signed
              sudo docker stop ${{ env.NGINX_CONTAINER }}
              sudo docker rm ${{ env.NGINX_CONTAINER }}
              sudo docker run -d \
              --name ${{ env.NGINX_CONTAINER }} \
              --network portfolio-network \
              --memory=32m \
              --memory-swap=32m \
              --cpus="0.1" \
              --restart unless-stopped \
                -p 80:80 \
                -p 443:443 \
                -v $(pwd)/ssl:/etc/nginx/ssl:ro \
                --health-cmd="wget --no-verbose --tries=1 --spider https://localhost/nginx_status --no-check-certificate || curl -f https://localhost/nginx_status -k || exit 1" \
                --health-interval=30s \
                --health-timeout=5s \
                --health-retries=3 \
                nginx-proxy
            fi
            
            echo "‚úÖ Application deployed successfully"
            
            # Show memory usage for monitoring
            echo "üìä Memory usage after deployment:"
            sudo docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"
            
            # Check if we're within memory limits
            TOTAL_MEMORY=$(free -m | awk 'NR==2{printf "%.0f", $2}')
            USED_MEMORY=$(free -m | awk 'NR==2{printf "%.0f", $3}')
            MEMORY_PERCENT=$((USED_MEMORY * 100 / TOTAL_MEMORY))
            
            if [ $MEMORY_PERCENT -gt 90 ]; then
              echo "‚ö†Ô∏è WARNING: Memory usage is ${MEMORY_PERCENT}% - consider upgrading VM"
            else
              echo "‚úÖ Memory usage is ${MEMORY_PERCENT}% - within acceptable limits"
            fi

      - name: ‚úÖ Verify Deployment
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "‚úÖ Verifying deployment..."
            
            # Wait for containers to start (Spring Boot needs more time)
            echo "‚è≥ Waiting for application to fully start..."
            sleep 120
            
            # Check container status
            echo "üìã Container status:"
            sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            
            # Check application health with retry logic
            echo "üîç Checking application health..."
            MAX_RETRIES=15
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if sudo docker exec ${{ env.CONTAINER_NAME }} curl -f http://localhost:8080/api/actuator/health >/dev/null 2>&1; then
                echo "‚úÖ Application is healthy"
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "‚è≥ Application not ready yet (attempt $RETRY_COUNT/$MAX_RETRIES)..."
                if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                  sleep 20
                fi
              fi
            done
            
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "‚ùå Application health check failed after $MAX_RETRIES attempts"
              echo "üìã Container status:"
              sudo docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
              echo "üìã Application logs:"
              sudo docker logs --tail 30 ${{ env.CONTAINER_NAME }}
              exit 1
            fi
            
            # Check nginx status with retry logic
            echo "üåê Checking nginx health..."
            NGINX_RETRY_COUNT=0
            NGINX_MAX_RETRIES=10
            
            # Wait for nginx to stabilize (it was restarting)
            echo "‚è≥ Waiting for nginx to stabilize..."
            sleep 30
            
            while [ $NGINX_RETRY_COUNT -lt $NGINX_MAX_RETRIES ]; do
              # Check if nginx is running (not restarting)
              NGINX_STATUS=$(sudo docker ps --format "{{.Status}}" --filter "name=${{ env.NGINX_CONTAINER }}" | head -1)
              if echo "$NGINX_STATUS" | grep -q "Up" && ! echo "$NGINX_STATUS" | grep -q "Restarting"; then
                if sudo docker exec ${{ env.NGINX_CONTAINER }} wget --no-verbose --tries=1 --spider https://localhost/nginx_status --no-check-certificate >/dev/null 2>&1; then
                  echo "‚úÖ Nginx is healthy"
                  break
                fi
              fi
              
              NGINX_RETRY_COUNT=$((NGINX_RETRY_COUNT + 1))
              echo "‚è≥ Nginx not ready yet (attempt $NGINX_RETRY_COUNT/$NGINX_MAX_RETRIES) - Status: $NGINX_STATUS"
              if [ $NGINX_RETRY_COUNT -lt $NGINX_MAX_RETRIES ]; then
                sleep 15
              fi
            done
            
            if [ $NGINX_RETRY_COUNT -eq $NGINX_MAX_RETRIES ]; then
              echo "‚ùå Nginx health check failed after $NGINX_MAX_RETRIES attempts"
              echo "üìã Nginx status:"
              sudo docker ps --filter "name=${{ env.NGINX_CONTAINER }}"
              echo "üìã Nginx logs:"
              sudo docker logs --tail 30 ${{ env.NGINX_CONTAINER }}
              exit 1
            fi

            # Check SSL certificate
            echo "üîê Checking SSL certificate..."
            if [ -f "ssl/cert.pem" ]; then
              CERT_ISSUER=$(openssl x509 -in ssl/cert.pem -noout -issuer 2>/dev/null | cut -d= -f2- || echo "Unknown")
              if echo "$CERT_ISSUER" | grep -q "Let's Encrypt"; then
                echo "‚úÖ Valid Let's Encrypt certificate configured"
                echo "üîí Browser will show green lock"
              else
                echo "‚ö†Ô∏è Self-signed certificate configured"
                echo "üîì Browser will show security warning"
              fi
            fi
            
            # Show memory usage
            echo "üìä Memory usage:"
            sudo docker stats --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}"
            
            echo ""
            echo "üéâ Deployment completed successfully!"
            echo "üåê Access URLs:"
            echo "   - HTTP:  http://${{ env.VM_HOST }}/api/actuator/health"
            echo "   - HTTPS: https://${{ env.VM_HOST }}/api/actuator/health"
            echo "   - API:   https://${{ env.VM_HOST }}/api/"
