name: Deploy backend to VM (backend + docker)

on:
  push:
    branches:
      - main

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3️⃣ Dar permissão ao Maven Wrapper
      - name: Give execute permission to Maven wrapper
        run: chmod +x ./mvnw

      # 4️⃣ Build do JAR
      - name: Build JAR
        run: ./mvnw -B clean package -DskipTests

      - name: List JAR
        run: ls -l target/

      # 5️⃣ Copiar apenas o JAR para a VM
      - name: Copy JAR to backend VM
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.BACKEND_VM_IP }}
          username: ${{ secrets.BACKEND_VM_USER }}
          key: ${{ secrets.BACKEND_VM_SSH_KEY }}
          port: 22
          source: "target/portfolio-backend-0.0.1-SNAPSHOT.jar"
          target: "/home/ubuntu/backend/app.jar"

      # 6️⃣ Build e deploy na VM usando Dockerfile do repo
      - name: Build and deploy backend on VM
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.BACKEND_VM_IP }}
          username: ${{ secrets.BACKEND_VM_USER }}
          key: ${{ secrets.BACKEND_VM_SSH_KEY }}
          port: 22
          script: |
            set -e
            cd /home/ubuntu/backend

            # Verifica se docker buildx está disponível, instala se necessário
            if ! docker buildx version >/dev/null 2>&1; then
              echo "Buildx não encontrado. Instalando..."
              mkdir -p ~/.docker/cli-plugins
              curl -SL https://github.com/docker/buildx/releases/latest/download/docker-buildx-linux-amd64 -o ~/.docker/cli-plugins/docker-buildx
              chmod +x ~/.docker/cli-plugins/docker-buildx
            fi

            # Ativa BuildKit
            export DOCKER_BUILDKIT=1

            # Build da imagem Docker usando Dockerfile do repo
            docker build -t portfolio-backend .

            # Para e remove container antigo se existir
            if docker ps -a --format '{{.Names}}' | grep -Eq '^portfolio-backend$'; then
              docker stop portfolio-backend || true
              docker rm portfolio-backend || true
            fi

            # Roda o container com variáveis de ambiente
            docker run -d --name portfolio-backend \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS="${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }}" \
              portfolio-backend:latest
