name: Deploy backend to VM (backend + docker)

on:
  push:
    branches:
      - main
      - develop
      - feature/*

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Checkout do repositório
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2️⃣ Set up JDK 21
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      # 3️⃣ Dar permissão ao Maven Wrapper
      - name: Give execute permission to Maven wrapper
        run: chmod +x ./mvnw

      # 4️⃣ Build do JAR
      - name: Build JAR
        run: ./mvnw -B clean package -DskipTests

      # 5️⃣ Listar JAR para verificar se gerou
      - name: List JAR
        run: ls -lh target/

      # 6️⃣ Garantir que o diretório existe na VM
      - name: Ensure backend directory exists
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.BACKEND_VM_IP }}
          username: ${{ secrets.BACKEND_VM_USER }}
          key: ${{ secrets.BACKEND_VM_SSH_KEY }}
          port: 22
          script: |
            mkdir -p /home/ubuntu/backend
            chmod 755 /home/ubuntu/backend

      # 7️⃣ Copiar JAR e Dockerfile para a VM
      - name: Copy JAR and Dockerfile to backend VM
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.BACKEND_VM_IP }}
          username: ${{ secrets.BACKEND_VM_USER }}
          key: ${{ secrets.BACKEND_VM_SSH_KEY }}
          port: 22
          source: |
            target/portfolio-backend-0.0.1-SNAPSHOT.jar
            Dockerfile
          target: /home/ubuntu/backend/

      # 8️⃣ Verificar arquivos na VM
      - name: Check backend files in VM
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.BACKEND_VM_IP }}
          username: ${{ secrets.BACKEND_VM_USER }}
          key: ${{ secrets.BACKEND_VM_SSH_KEY }}
          port: 22
          script: |
            echo "Arquivos no backend:"
            ls -lh /home/ubuntu/backend/

      # 9️⃣ Build e deploy na VM
      - name: Build and deploy backend on VM
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.BACKEND_VM_IP }}
          username: ${{ secrets.BACKEND_VM_USER }}
          key: ${{ secrets.BACKEND_VM_SSH_KEY }}
          port: 22
          script: |
            set -e
            cd /home/ubuntu/backend

            # Determina ambiente baseado na branch
            case "${GITHUB_REF##*/}" in
              main) ENV_NAME=prod ;;
              develop) ENV_NAME=staging ;;
              *) ENV_NAME=dev ;;
            esac

            IMAGE_NAME="portfolio-backend-${ENV_NAME}"
            CONTAINER_NAME="portfolio-backend-${ENV_NAME}"

            # Verifica se o JAR existe
            if [ ! -f "portfolio-backend-0.0.1-SNAPSHOT.jar" ] || [ ! -s "portfolio-backend-0.0.1-SNAPSHOT.jar" ]; then
              echo "JAR não encontrado ou está vazio!"
              exit 1
            fi
            echo "JAR encontrado:"
            ls -lh portfolio-backend-0.0.1-SNAPSHOT.jar

            # Instala Docker se necessário
            if ! command -v docker &> /dev/null; then
              curl -fsSL https://get.docker.com -o get-docker.sh
              sudo sh get-docker.sh
            fi
            sudo systemctl enable --now docker
            export DOCKER_BUILDKIT=1

            # Build da imagem Docker usando Dockerfile do repo
            sudo docker build --no-cache -t $IMAGE_NAME --build-arg JAR_FILE=portfolio-backend-0.0.1-SNAPSHOT.jar .

            # Para e remove container antigo
            sudo docker rm -f $CONTAINER_NAME || true

            # Exporta variáveis de ambiente
            export SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}"
            export SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}"
            export SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}"
            export SPRING_KAFKA_BOOTSTRAP_SERVERS="${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }}"

            # Roda o container
            sudo docker run -d --name $CONTAINER_NAME \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL="$SPRING_DATASOURCE_URL" \
              -e SPRING_DATASOURCE_USERNAME="$SPRING_DATASOURCE_USERNAME" \
              -e SPRING_DATASOURCE_PASSWORD="$SPRING_DATASOURCE_PASSWORD" \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS="$SPRING_KAFKA_BOOTSTRAP_SERVERS" \
              $IMAGE_NAME:latest

            echo "Deploy concluído! Aplicação rodando na porta 8080."
