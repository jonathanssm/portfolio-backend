name: Deploy Backend to VM

on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]
    branches:
      - main
      - develop

concurrency:
  group: backend-deploy-${{ github.ref }} # não cancela se for branch diferente
  #group: backend-deploy # cancela para qualquer branch
  cancel-in-progress: true

env:
  VM_HOST: ${{ secrets.BACKEND_VM_IP }}
  VM_USER: ${{ secrets.BACKEND_VM_USER }}
  VM_SSH_KEY: ${{ secrets.BACKEND_VM_SSH_KEY }}
  VM_PATH: /home/ubuntu/backend
  JAR_NAME: portfolio-backend-0.0.1-SNAPSHOT.jar

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java and Cache
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build JAR with verification
        run: |
          chmod +x ./mvnw
          ./mvnw -B clean package -DskipTests -T 1C
          
          # ✅ Verificação robusta do JAR
          echo "Verifying JAR file..."
          if [ ! -f "target/$JAR_NAME" ]; then
            echo "❌ JAR file not found in target/"
            ls -la target/
            exit 1
          fi
          
          if [ ! -s "target/$JAR_NAME" ]; then
            echo "❌ JAR file is empty"
            ls -lh target/
            exit 1
          fi
          
          if file "target/$JAR_NAME" | grep -q "Java archive"; then
            echo "✅ JAR file is valid"
          else
            echo "❌ JAR file is not a valid Java archive"
            file "target/$JAR_NAME"
            exit 1
          fi

      - name: Prepare artifacts
        run: |
          cp target/$JAR_NAME .
          ls -la $JAR_NAME Dockerfile

      - name: Setup VM directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            mkdir -p ${{ env.VM_PATH }}
            cd ${{ env.VM_PATH }}
            rm -rf *.jar Dockerfile 2>/dev/null || true
            echo "VM directory cleaned and ready"

      - name: Copy artifacts to VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          source: "${{ env.JAR_NAME }},Dockerfile"
          target: ${{ env.VM_PATH }}
          overwrite: true

      - name: Verify artifacts on VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "📦 Verifying artifacts on VM..."
            ls -la
            
            if [ ! -f "${{ env.JAR_NAME }}" ]; then
              echo "❌ JAR not found on VM"
              exit 1
            fi
            
            if [ ! -s "${{ env.JAR_NAME }}" ]; then
              echo "❌ JAR is empty on VM"
              exit 1
            fi
            
            echo "✅ All artifacts verified successfully"

      - name: Deploy Docker container with memory limits
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          envs: GITHUB_EVENT_NAME,GITHUB_REF
          script: |
            set -e
            cd ${{ env.VM_PATH }}

            # 🏷️ Determina ambiente com limites de memória
            if [ "$GITHUB_EVENT_NAME" = "pull_request" ]; then
              ENV="preview"
              PORT="8082"
              MEMORY_LIMIT="256m"      # 256MB para preview
              JAVA_OPTS="-Xms64m -Xmx192m -XX:+UseG1GC"
            else
              BRANCH="${GITHUB_REF#refs/heads/}"
              case "$BRANCH" in
                "main")
                  ENV="prod"
                  PORT="8080"
                  MEMORY_LIMIT="512m"  # 512MB para produção
                  JAVA_OPTS="-Xms128m -Xmx384m -XX:+UseG1GC"
                  ;;
                "develop")
                  ENV="staging"
                  PORT="8081"
                  MEMORY_LIMIT="384m"  # 384MB para staging
                  JAVA_OPTS="-Xms96m -Xmx256m -XX:+UseG1GC"
                  ;;
                *)
                  echo "🚫 Push detected on unsupported branch '$BRANCH'. Skipping deploy."
                  exit 0
                  ;;
              esac
            fi

            IMAGE_NAME="portfolio-backend-$ENV"
            CONTAINER_NAME="portfolio-backend-$ENV"
            
            echo "🚀 Deploying to $ENV environment"
            echo "📊 Memory limits: $MEMORY_LIMIT total, JAVA_OPTS: $JAVA_OPTS"

            # 🐳 Verifica Docker
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              curl -fsSL https://get.docker.com | sudo sh
              sudo systemctl enable docker
            fi

            # 🔐 Configura certificados SSL
            echo "🔐 Setting up SSL certificates..."
            mkdir -p ssl
            
            # Verificar se é domínio real ou IP/localhost
            if [[ "${{ env.VM_HOST }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+$ ]] || [ "${{ env.VM_HOST }}" = "localhost" ] || [ "${{ env.VM_HOST }}" = "127.0.0.1" ]; then
              echo "🏠 Usando certificados auto-assinados para IP/localhost: ${{ env.VM_HOST }}"
              sudo openssl req -x509 -newkey rsa:4096 -keyout ssl/key.pem -out ssl/cert.pem -days 3650 -nodes \
                -subj "/C=BR/ST=SP/L=SaoPaulo/O=Portfolio/OU=IT/CN=${{ env.VM_HOST }}" \
                -addext "subjectAltName=DNS:${{ env.VM_HOST }},IP:${{ env.VM_HOST }}"
            else
              echo "🌐 Configurando certificados Let's Encrypt para ${{ env.VM_HOST }}"
              
              # Aguarda liberação do lock do apt
              echo "⏳ Aguardando liberação do lock do apt..."
              while sudo fuser /var/lib/dpkg/lock-frontend >/dev/null 2>&1; do
                echo "   Lock ativo, aguardando 5s..."
                sleep 5
              done
              
              # Instalar certbot
              sudo apt-get update
              sudo apt-get install -y certbot
              
              # Verificar se certbot foi instalado
              if ! command -v certbot &> /dev/null; then
                echo "❌ Falha ao instalar certbot em produção - ABORTANDO DEPLOY"
                echo "❌ Produção deve ter apenas certificados válidos do Let's Encrypt"
                exit 1
              fi
              
              echo "✅ Certbot instalado com sucesso"
              
              # Gerar certificado Let's Encrypt
              sudo certbot certonly \
                --standalone \
                --non-interactive \
                --agree-tos \
                --email "${{ secrets.SSL_EMAIL || format('admin@{0}', env.VM_HOST) }}" \
                --domains "${{ env.VM_HOST }}" \
                --expand
              
              # Verificar se certificados foram gerados
              if [ -f "/etc/letsencrypt/live/${{ env.VM_HOST }}/fullchain.pem" ]; then
                sudo cp "/etc/letsencrypt/live/${{ env.VM_HOST }}/fullchain.pem" ssl/cert.pem
                sudo cp "/etc/letsencrypt/live/${{ env.VM_HOST }}/privkey.pem" ssl/key.pem
                echo "✅ Certificados Let's Encrypt configurados"
                
                # Configurar renovação automática
                echo "⏰ Configurando renovação automática..."
                chmod +x scripts/ssl-renew.sh
                chmod +x scripts/setup-ssl-cron.sh
                ./scripts/setup-ssl-cron.sh "${{ env.VM_HOST }}"
              else
                echo "❌ Falha ao gerar certificados Let's Encrypt em produção - ABORTANDO DEPLOY"
                echo "❌ Produção deve ter apenas certificados válidos"
                exit 1
              fi
            fi
            
            # Define permissões corretas
            sudo chmod 600 ssl/key.pem
            sudo chmod 644 ssl/cert.pem
            sudo chown -R $USER:$USER ssl/
            
            echo "✅ SSL certificates configured successfully"

            # 🏗️ Build das imagens
            echo "🔨 Building Docker images..."
            sudo docker build -t $IMAGE_NAME .
            sudo docker build -t nginx-proxy ./nginx

            # 🔄 Rolling update
            echo "🔄 Performing rolling update for $ENV"
            sudo docker stop $CONTAINER_NAME 2>/dev/null || true
            sudo docker rm $CONTAINER_NAME 2>/dev/null || true
            sudo docker stop nginx-proxy 2>/dev/null || true
            sudo docker rm nginx-proxy 2>/dev/null || true

            # 🚀 Executa containers com limites de memória
            echo "🎯 Starting containers with memory limits..."
            
            # Backend container
            sudo docker run -d \
              --name $CONTAINER_NAME \
              --memory=$MEMORY_LIMIT \
              --memory-swap=$MEMORY_LIMIT \
              --cpus="0.5" \
              -e JAVA_OPTS="$JAVA_OPTS" \
              -e SPRING_PROFILES_ACTIVE=production \
              -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS="${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }}" \
              --restart unless-stopped \
              $IMAGE_NAME

            # Nginx container
            sudo docker run -d \
              --name nginx-proxy \
              -p 80:80 \
              -p 443:443 \
              -v $(pwd)/ssl:/etc/nginx/ssl:ro \
              --link $CONTAINER_NAME:portfolio-backend \
              --restart unless-stopped \
              nginx-proxy

            # 🔍 Verificação Pós-Deploy
            echo "✅ Deployment completed! Verifying..."
            sleep 10

            echo "📋 Container status:"
            sudo docker ps --filter "name=$CONTAINER_NAME" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
            sudo docker ps --filter "name=nginx-proxy" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

            echo "📊 Memory usage:"
            sudo docker stats $CONTAINER_NAME --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" || true
            sudo docker stats nginx-proxy --no-stream --format "table {{.Name}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}" || true

            if sudo docker inspect $CONTAINER_NAME &>/dev/null && sudo docker inspect nginx-proxy &>/dev/null; then
              echo "💚 SUCCESS: Containers deployed successfully!"
              echo "🌐 Access:"
              echo "   - HTTP:  http://${{ env.VM_HOST }}/actuator/health"
              echo "   - HTTPS: https://${{ env.VM_HOST }}/actuator/health"
              echo "   - API:   https://${{ env.VM_HOST }}/api/"
            
              # 📝 Logs iniciais para debug
              echo "📋 Application logs (last 10 lines):"
              sudo docker logs --tail 10 $CONTAINER_NAME
              echo "📋 Nginx logs (last 5 lines):"
              sudo docker logs --tail 5 nginx-proxy
            else
              echo "❌ ERROR: One or more containers failed to start"
              sudo docker logs $CONTAINER_NAME 2>/dev/null || echo "No backend logs available"
              sudo docker logs nginx-proxy 2>/dev/null || echo "No nginx logs available"
              exit 1
            fi

            # 🧹 Cleanup de imagens antigas
            echo "🧹 Cleaning up old images..."
            sudo docker image prune -af --filter "until=48h"
