name: Deploy Backend to VM

on:
  push:
    branches:
      - main
      - develop
      - feature/*

env:
  VM_HOST: ${{ secrets.BACKEND_VM_IP }}
  VM_USER: ${{ secrets.BACKEND_VM_USER }}
  VM_SSH_KEY: ${{ secrets.BACKEND_VM_SSH_KEY }}
  VM_PATH: /home/ubuntu/backend
  JAR_NAME: portfolio-backend-0.0.1-SNAPSHOT.jar

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Java and Cache
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Build JAR with verification
        run: |
          chmod +x ./mvnw
          ./mvnw -B clean package -DskipTests -T 1C
          
          # ✅ Verificação robusta do JAR
          echo "Verifying JAR file..."
          if [ ! -f "target/$JAR_NAME" ]; then
            echo "❌ JAR file not found in target/"
            ls -la target/
            exit 1
          fi
          
          if [ ! -s "target/$JAR_NAME" ]; then
            echo "❌ JAR file is empty"
            ls -lh target/
            exit 1
          fi
          
          # ✅ Testa se é um arquivo válido
          if file "target/$JAR_NAME" | grep -q "Java archive"; then
            echo "✅ JAR file is valid"
          else
            echo "❌ JAR file is not a valid Java archive"
            file "target/$JAR_NAME"
            exit 1
          fi

      - name: Prepare artifacts with checksum
        run: |
          # ✅ Copia e verifica integridade
          cp target/$JAR_NAME .
          ls -la $JAR_NAME Dockerfile
          
          # ✅ Checksum para verificação
          md5sum $JAR_NAME > jar_checksum.txt
          echo "JAR checksum: $(md5sum $JAR_NAME)"

      - name: Setup VM directory
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            mkdir -p ${{ env.VM_PATH }}
            cd ${{ env.VM_PATH }}
            # ✅ Limpa arquivos anteriores completamente
            rm -f *.jar Dockerfile 2>/dev/null || true
            echo "VM directory cleaned and ready"

      - name: Copy artifacts to VM
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          source: "${{ env.JAR_NAME }},Dockerfile"
          target: ${{ env.VM_PATH }}
          overwrite: true

      - name: Verify artifacts on VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            echo "📦 Verifying artifacts on VM..."
            ls -la
            
            # ✅ Verifica se os arquivos são válidos
            if [ ! -f "${{ env.JAR_NAME }}" ]; then
              echo "❌ JAR not found on VM"
              exit 1
            fi
            
            if [ ! -s "${{ env.JAR_NAME }}" ]; then
              echo "❌ JAR is empty on VM"
              exit 1
            fi
            
            echo "✅ All artifacts verified successfully"

      - name: Deploy Docker container
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ env.VM_HOST }}
          username: ${{ env.VM_USER }}
          key: ${{ env.VM_SSH_KEY }}
          script: |
            set -e
            cd ${{ env.VM_PATH }}
            
            # 🏷️ Determina ambiente pela branch
            BRANCH="${GITHUB_REF##*/}"
            case "$BRANCH" in
              "main") ENV="prod" ;;
              "develop") ENV="staging" ;;
              *) ENV="dev" ;;
            esac
            
            IMAGE_NAME="portfolio-backend-$ENV"
            CONTAINER_NAME="portfolio-backend-$ENV"
            echo "🚀 Deploying to $ENV environment"
            
            # 🐳 Verifica Docker
            if ! command -v docker &> /dev/null; then
              echo "📦 Installing Docker..."
              curl -fsSL https://get.docker.com | sudo sh
              sudo systemctl enable docker
            fi
            
            # 🏗️ Build da imagem
            echo "🔨 Building Docker image..."
            sudo docker build -t $IMAGE_NAME .
            
            # 🔄 Rolling update
            echo "🔄 Performing rolling update"
            sudo docker stop $CONTAINER_NAME 2>/dev/null || true
            sudo docker rm $CONTAINER_NAME 2>/dev/null || true
            
            # 🚀 Executa container
            echo "🎯 Starting container..."
            sudo docker run -d \
              --name $CONTAINER_NAME \
              -p 8080:8080 \
              -e SPRING_PROFILES_ACTIVE=$ENV \
              -e SPRING_DATASOURCE_URL="${{ secrets.SPRING_DATASOURCE_URL }}" \
              -e SPRING_DATASOURCE_USERNAME="${{ secrets.SPRING_DATASOURCE_USERNAME }}" \
              -e SPRING_DATASOURCE_PASSWORD="${{ secrets.SPRING_DATASOURCE_PASSWORD }}" \
              -e SPRING_KAFKA_BOOTSTRAP_SERVERS="${{ secrets.SPRING_KAFKA_BOOTSTRAP_SERVERS }}" \
              --restart unless-stopped \
              $IMAGE_NAME
            
            echo "✅ Deployment completed successfully!"
